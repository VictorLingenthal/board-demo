{"version":3,"sources":["utils/createevent.js","reducers/globalreducer.js","reducers/useCards.tsx","services/statusService.tsx","services/cardService.tsx","reducers/useUsers.tsx","services/userService.tsx","components/header.tsx","utils/utils.js","components/card.tsx","components/column.tsx","components/board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["createEvent","invokeList","event","e","add","remove","filter","c","globalReducer","initialValue","reducer","onStateChange","undefined","state","onChange","dispatch","Object","keys","reduce","p","params","newState","selector","onComponentStateChanged","useState","componentState","setComponentState","useEffect","onComponentChange","newComponentState","deleteCard","id","i","addCard","card","addCards","cards","setStatus","status","map","setTitle","title","setOwner","owner","StatusService","statusTypes","getStatusByValue","value","this","label","CardService","dispatcher","statusService","convertServerCard","_id","creator","date","getCards","axios","get","then","res","data","catch","error","console","log","post","update","param","updateStatus","selectedDropdown","updateOwner","newOwner","updateTitle","currentTarget","delete","useCards","addUser","user","addUsers","users","deleteUser","UserService","expandUsers","u","name","getUsers","useUsers","userArray","Header","props","userService","userInput","setUserInput","userDropdown","setUserDropdown","className","placeholder","onClick","options","isClearable","capitalize","s","charAt","toUpperCase","slice","Card","editTitle","setEditTitle","_toggleTitle","cardService","model","autoFocus","onBlur","Column","cardModel","Board","Columns","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c589199c.chunk.js","sourcesContent":["/**\n * Creates a new event that allows subscribers to add and remove event handlers.\n * @return {function}\n * @property {function(handler: function)} add Add a new event handler.\n * @property {function(handler: function)} remove Remove an event handler.\n */\nexport default function createEvent() {\n  let invokeList = [];\n\n  const event = (...args) => {\n    for (const e of invokeList) {\n      e(...args);\n    }\n  };\n\n  event.add = e => {\n    invokeList = [...invokeList, e];\n  };\n\n  event.remove = e => {\n    invokeList = invokeList.filter(c => c !== e);\n  };\n\n  return event;\n}\n","import { useEffect, useState } from \"react\";\n\nimport createEvent from \"../utils/createevent\";\n\n/**\n * Creates a global reducer for use within any number of components. The function returned allows for a selector function to be passed to limit the re-renders of the consuming component.\n *\n * @param {Object} initialValue The initial value for the state.\n * @param {Object} reducer The dispatch functions.\n * @param {function(state: Object)} [onStateChange=undefined] onStateChange An optional callback for when the state changes. Can be used for persisting to local storage.\n * @return {function(selector: function = undefined, onComponentStateChanged: function = undefined): [Object, Object]}\n */\nexport default function globalReducer(\n  initialValue,\n  reducer,\n  onStateChange = undefined\n) {\n  let state = initialValue;\n  const onChange = createEvent();\n\n\n  const dispatch = Object.keys(reducer).reduce(\n    (p, c) => ({\n      ...p,\n      [c]: (...params) => {\n        const newState = reducer[c](state, ...params);\n\n        if (state !== newState) {\n          state = newState;\n          onChange(newState);\n\n          if (onStateChange)\n            onStateChange(newState);\n\n        }\n      }\n    }),\n    {}\n  );\n\n  return (selector = undefined, onComponentStateChanged = undefined) => {\n    const [componentState, setComponentState] = useState(\n      selector ? selector(state) : state\n    );\n\n    useEffect(\n      () => {\n        const onComponentChange = newState => {\n          const newComponentState = selector ? selector(newState) : newState;\n\n          if (newComponentState !== componentState) {\n            setComponentState(newComponentState);\n\n            if (onComponentStateChanged) {\n              onComponentStateChanged(newComponentState);\n            }\n          }\n        };\n\n        onChange.add(onComponentChange);\n\n        return () => {\n          onChange.remove(onComponentChange);\n        };\n      },\n      [componentState]\n    );\n\n    return [componentState, dispatch];\n  };\n}\n","import globalReducer from \"./globalreducer\"\n\nexport const reducer = {\n  // Delete a card by id\n  deleteCard: (state:Card[], id:string) => state.filter(i => i.id !== id),\n\n  // Create a new card\n  addCard: (state:Card[], card:Card) => [card, ...state],\n\n  // Add multiple new cards\n  addCards: (state:Card[], cards:Card[]) => [...cards, ...state],\n\n  // Set the done state of an item\n  setStatus: (state:Card[], id:string, status:string) =>\n    state.map(i =>\n      i.id === id\n        ? {\n            ...i,\n            status\n          }\n        : i\n    ),\n\n  // Set the label of an item\n  setTitle: (state:Card[], id:string, title:string) =>\n    state.map(i =>\n      i.id === id\n        ? {\n            ...i,\n            title\n          }\n        : i\n    ),\n\n    // Set the owner of an item\n    setOwner: (state:Card[], id:string, owner:string) =>\n      state.map(i =>\n        i.id === id\n          ? {\n              ...i,\n              owner\n            }\n          : i\n      )\n\n}\n\nexport default globalReducer(\n  // Load cards from local storage\n  // JSON.parse(localStorage.getItem(\"cards\") || \"[]\"),\n  [],\n  reducer\n  // On state change, persist to local storage\n  // cards => localStorage.setItem(\"cards\", JSON.stringify(cards))\n)\n","\nexport default class StatusService implements IStatusService {\n\n  public statusTypes:CardStatus[]\n\n  constructor() {\n    this.statusTypes = [\n        {value:'backlog', label:'Backlog'},\n        {value:'todo', label:'To Do'},\n        {value:'inprogress', label:'In Progress'},\n        {value:'resolved', label:'Resolved'},\n        {value:'won\\'t fix', label:'Won\\'t Fix'}\n    ]\n  }\n\n  public getStatusByValue = (value:CardStatusValue):CardStatus =>\n    this.statusTypes.filter(i => i.value === value)[0]\n\n}\n","import axios from 'axios'\nimport useCards from '../reducers/useCards'\nimport statusService from '../services/statusService'\n\nexport default class CardService implements ICardService {\n\n  public cards\n  public dispatcher\n  public statusService\n\n  constructor () {\n    const [cards, dispatcher] = (useCards as any)()\n    this.cards = cards\n    this.dispatcher = dispatcher\n    this.statusService = new statusService()\n  }\n\n  // converts the Card from the Server model to the client model\n  private convertServerCard = (card:ServerCard):Card => ({\n      id: card._id,\n      title: card.title,\n      status: this.statusService.getStatusByValue(card.status),\n      owner: card.owner,\n      creator: card.creator,\n      date: card.date\n    })\n\n  // gets All Cards from Server\n  public getCards = ():void => {\n    let cards:ServerCard[] = []\n    axios.get('/cards')\n      .then(res => {\n        cards = res.data\n        this.dispatcher.addCards(cards.map(card => this.convertServerCard(card))\n      )})\n      .catch(error => console.log(error))\n  }\n\n  // Adds a new Cards\n  public addCard = (status:CardStatus) =>\n    axios.post('/cards/add', {status: status.value})\n      .then(res => this.dispatcher.addCard(this.convertServerCard(res.data)))\n      .catch(function (error) {\n        console.log(error);\n      })\n\n  private update = (id:string, param:any) =>\n    axios.post('/cards/update/'+id, param)\n        .then(res => {\n            console.log(res)\n        }).catch(function (error) {\n          console.log(error)\n        })\n\n  public updateStatus = (id: string, selectedDropdown:any) => {\n    this.dispatcher.setStatus(id, selectedDropdown)\n    this.update(id, {status: selectedDropdown.value})\n  }\n\n  public updateOwner = (id: string, selectedDropdown:any) => {\n    var newOwner = selectedDropdown ? selectedDropdown.value : null\n    this.dispatcher.setOwner(id, newOwner)\n    this.update(id, {owner: newOwner})\n  }\n\n  public updateTitle = (id: string, e:React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.dispatcher.setTitle(id, e.currentTarget.value)\n    this.update(id, {title: e.currentTarget.value})\n  }\n\n  public deleteCard = (id:string) => {\n    this.dispatcher.deleteCard(id)\n    axios.delete('/cards/'+id)\n        .then(res => {\n            console.log(res)\n        }).catch(function (error) {\n          console.log(error)\n        })\n  }\n\n}\n","import globalReducer from \"./globalreducer\";\n\nexport const reducer = {\n\n  // Create a new user\n  addUser: (state:User[], user:User) => [user, ...state],\n\n  // Add a user Array\n  addUsers: (state:User[], users:User[]) => [...users, ...state],\n\n  // Delete a user by id\n  deleteUser: (state:User[], id:string) => state.filter(i => i.id !== id),\n\n};\n\nexport default globalReducer(\n  // Load users from local storage\n  // JSON.parse(localStorage.getItem(\"users\") || \"[]\"),\n  [],\n  reducer,\n  // On state change, persist to local storage\n  // users => localStorage.setItem(\"users\", JSON.stringify(users))\n);\n","import axios from 'axios'\nimport useUsers from '../reducers/useUsers'\n\nexport default class UserService implements IUserService {\n\n  public users\n  public dispatcher\n\n  constructor () {\n    const [userArray, dispatcher] = (useUsers as any)()\n    this.users = userArray\n    this.dispatcher = dispatcher\n  }\n\n  // converts users into format for the dropdown\n  private expandUsers = (u:ServerUser[]):User[] =>\n    u.map(i => ({value:i.name, label:i.name, id: i._id}))\n\n  // gets All Users from Server\n  public getUsers = ():void => {\n    axios.get('/users')\n      .then(res => this.dispatcher.addUsers(this.expandUsers(res.data)))\n      .catch(error => console.log(error))\n  }\n\n  // Adds a new Users\n  public addUser = (name:string) =>\n    axios.post('/users/add', {name: name})\n      .then(res => this.dispatcher.addUser(this.expandUsers([res.data])))\n      .catch(function (error) {\n        console.log(error)})\n\n    // Adds a new Users\n    public deleteUser = (id:string) =>\n      id ? axios.delete('/users/'+id)\n        .then(res => this.dispatcher.deleteUser(this.expandUsers([res.data])))\n        .catch(function (error) {\n          console.log(error)})\n          : null\n\n}\n","import React, { FC, useState } from 'react';\n\nimport './header.scss'\n\nimport Select from 'react-select'\n\nlet Header: FC<{\n  userService:IUserService\n}> = (props) => {\n\n  let userService = props.userService\n\n  const [userInput, setUserInput] = useState<string>()\n  const [userDropdown, setUserDropdown] = useState<User>()\n\n  let _onClickAddUser = () => {\n    if (userInput)\n      userService.addUser(userInput)\n    setUserInput('')\n  }\n\n  let _onChangeInput = (e:React.ChangeEvent<HTMLInputElement>) => setUserInput(e.currentTarget.value)\n  let _onChangeUser = (selectedDropdown:any) => setUserDropdown(selectedDropdown)\n  let _onClickDeleteUser = () => userService.deleteUser(userDropdown ? userDropdown.id : null)\n\n  return (\n    <header className=\"boardHeader\">\n      <input\n        placeholder=\"New Username\"\n        value={userInput}\n        onChange={_onChangeInput}/>\n      <button onClick={_onClickAddUser}>Add User</button>\n      <Select\n        className=\"deleteUser\"\n        options={userService.users}\n        value={userDropdown}\n        placeholder=\"Pick User\"\n        isClearable={true}\n        onChange={_onChangeUser}\n      />\n      <button onClick={_onClickDeleteUser}>Delete User</button>\n    </header>\n  )\n}\n\nexport default Header;\n","export function guid() {\n  var s4 = () => {\n    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n  };\n\n  return `${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n}\n\nconst capitalize = (s) => {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\nexport default capitalize\n","import React, { FC, useState } from 'react'\n\nimport './card.scss'\n\nimport Select from 'react-select'\nimport TextareaAutosize from 'react-textarea-autosize'\nimport capitalize from \"../utils/utils\"\n\nlet Card: FC<{\n  model:Card\n  cardService:ICardService\n  users:Object[]\n}> = (props) => {\n\n  let [editTitle, setEditTitle] = useState<boolean>(false)\n  let _toggleTitle = () => setEditTitle(!editTitle)\n\n  let cardService = props.cardService\n  let _onChangeStatus = (selectedDropdown:any) =>\n    cardService.updateStatus(props.model.id, selectedDropdown)\n  let _onChangeOwner = (selectedDropdown:any) =>\n    cardService.updateOwner(props.model.id, selectedDropdown)\n  let _onChangeInput = (e:React.ChangeEvent<HTMLTextAreaElement>) =>\n    cardService.updateTitle(props.model.id, e)\n  let _onDeleteButton = () =>\n    cardService.deleteCard(props.model.id)\n\n  return (\n    <div className=\"card\">\n\n      <header>\n        <Select\n          className=\"selectOwner\"\n          options={props.users}\n          value={{\n            value: props.model.owner,\n            label: capitalize(props.model.owner)\n          }}\n          placeholder=\"Owner\"\n          isClearable={true}\n          onChange={_onChangeOwner}\n        />\n        <Select\n          className=\"selectStatus\"\n          options={cardService.statusService.statusTypes}\n          value={props.model.status}\n          placeholder=\"Status\"\n          onChange={_onChangeStatus}\n        />\n      </header>\n\n      <main>\n\n        { !editTitle &&\n          <div onClick={_toggleTitle}\n          >{props.model.title}</div>\n        }\n\n        { editTitle  &&\n          <TextareaAutosize\n            placeholder=\"Enter Title\"\n            autoFocus\n            value={props.model.title}\n            onChange={_onChangeInput}\n            onBlur={_toggleTitle}\n        />}\n\n      </main>\n\n      <button\n        className=\"deleteButton\"\n        onClick={_onDeleteButton}\n      >X</button>\n\n    </div>\n  )\n}\n\n\nexport default Card\n","import React, { FC } from 'react'\nimport './column.scss'\n\nimport Card from './card'\n\nlet Column: FC<{\n  status:CardStatus,\n  users:Object[]\n  cardService:ICardService\n}> = (props) => {\n\n  let _onClick = () =>\n    props.cardService.addCard(props.status)\n\n  return (\n    <div className=\"column\">\n      <header className=\"columnHeader\">\n        {props.status.label}\n        <button onClick={_onClick}>+</button>\n      </header>\n      <main className=\"columnMain\">\n        {props.cardService.cards.filter(\n          card => card.status.value === props.status.value).map((\n            cardModel =>\n              <Card\n                key={cardModel.id}\n                model={cardModel}\n                cardService={props.cardService}\n                users={props.users}\n              ></Card>\n        ))}\n      </main>\n    </div>\n  )\n}\n\nexport default Column\n","import React, { FC, useEffect } from 'react';\nimport './board.scss';\n\nimport CardService from '../services/cardService'\nimport UserService from '../services/userService'\n\nimport Header from './header'\nimport Column from './column'\n\nlet Board: FC = () => {\n\n  let cardService = new CardService()\n  let userService = new UserService()\n\n  useEffect(() => cardService.getCards(), [])\n  useEffect(() => userService.getUsers(), [])\n\n  let Columns = cardService.statusService.statusTypes.map((status =>\n    <Column\n      key={status.label}\n      status={status}\n      users={userService.users}\n      cardService={cardService}\n    ></Column>\n  ))\n\n  return (\n    <div className=\"board\">\n      <Header userService={userService}/>\n      <main className=\"boardmain\">\n        {Columns}\n      </main>\n    </div>\n  );\n}\n\nexport default Board;\n","import React from 'react';\nimport './App.scss';\n\nimport Board from './components/board'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Board></Board>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}