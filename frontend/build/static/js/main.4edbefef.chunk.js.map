{"version":3,"sources":["utils/createevent.ts","reducers/globalreducer.ts","reducers/useCards.ts","reducers/useUsers.ts","services/statusService.ts","services/cardService.ts","services/apolloClient.ts","services/userService.ts","components/header.tsx","utils/utils.ts","components/board.tsx","components/card.tsx","components/column.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["createEvent","invokeList","event","e","add","remove","filter","c","globalReducer","initialValue","reducer","onStateChange","undefined","state","onChange","dispatch","Object","keys","reduce","p","params","newState","selector","onComponentStateChanged","useState","componentState","setComponentState","useEffect","onComponentChange","newComponentState","deleteCard","id","i","addCard","card","addCards","cards","setStatus","status","map","setTitle","title","setOwner","owner","addUser","user","addUsers","users","deleteUser","StatusService","statusTypes","getStatusByValue","value","this","label","instance","CardService","dispatcher","apolloClient","titleTimeouts","convertServerCard","statusService","getInstance","creator","date","getCards","query","gql","then","res","data","catch","error","console","log","mutate","variables","mutation","update","param","updateStatus","selectedDropdown","updateOwner","updateTitle","oldTitle","timeout","timeouts","newTimeout","setTimeout","clearTimeout","newTitleTimeout","ApolloClient","cache","InMemoryCache","addTypename","uri","expandUsers","u","name","userService","getUsers","err","Header","useUsers","userInput","setUserInput","userDropdown","setUserDropdown","className","placeholder","currentTarget","onClick","options","isClearable","cardService","capitalize","s","charAt","toUpperCase","slice","CardComp","props","editTitle","setEditTitle","deletePending","setDeletePending","_toggleTitle","model","autoFocus","onBlur","finally","Column","cardModel","Board","useCards","cardDispatcher","Columns","App","StrictMode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4edbefef.chunk.js","sourcesContent":["/**\n * Creates a new event that allows subscribers to add and remove event handlers.\n * @return {function}\n * @property {function(handler: function)} add Add a new event handler.\n * @property {function(handler: function)} remove Remove an event handler.\n */\nexport default function createEvent() {\n  let invokeList:any[] = [];\n\n  const event = (...args:any[]) => {\n    for (const e of invokeList) {\n      e(...args);\n    }\n  };\n\n  event.add = (e:any) => {\n    invokeList = [...invokeList, e];\n  };\n\n  event.remove = (e:any) => {\n    invokeList = invokeList.filter(c => c !== e);\n  };\n\n  return event;\n}\n","import { useEffect, useState } from \"react\";\n\nimport createEvent from \"../utils/createevent\";\n\n/**\n * Creates a global reducer for use within any number of components. The function returned allows for a selector function to be passed to limit the re-renders of the consuming component.\n *\n * @param {Object} initialValue The initial value for the state.\n * @param {Object} reducer The dispatch functions.\n * @param {function(state: Object)} [onStateChange=undefined] onStateChange An optional callback for when the state changes. Can be used for persisting to local storage.\n * @return {function(selector: function = undefined, onComponentStateChanged: function = undefined): [Object, Object]}\n */\nexport default function globalReducer(\n  initialValue:any[],\n  reducer:any,\n  onStateChange:any = undefined\n) {\n  let state = initialValue;\n  const onChange = createEvent();\n\n  const dispatch = Object.keys(reducer).reduce(\n    (p, c) => ({\n      ...p,\n      [c]: (...params:any[]) => {\n        const newState = reducer[c](state, ...params);\n\n        if (state !== newState) {\n          state = newState;\n          onChange(newState);\n\n          if (onStateChange)\n            onStateChange(newState);\n\n        }\n      }\n    }),\n    {}\n  );\n\n  return (selector:any = undefined, onComponentStateChanged:any = undefined) => {\n    const [componentState, setComponentState] = useState(\n      selector ? selector(state) : state\n    );\n    useEffect(\n      () => {\n        const onComponentChange = (newState:any[]) => {\n          const newComponentState = selector ? selector(newState) : newState;\n\n          if (newComponentState !== componentState) {\n            setComponentState(newComponentState);\n\n            if (onComponentStateChanged) {\n              onComponentStateChanged(newComponentState);\n            }\n          }\n        };\n\n        onChange.add(onComponentChange);\n\n        return () => {\n          onChange.remove(onComponentChange);\n        };\n      },\n      [componentState]\n    );\n    return [componentState, dispatch];\n  };\n}\n","import globalReducer from \"./globalreducer\"\n\nimport { CardStatus } from '../services/statusService'\n\nexport type Card = {\n  id: string\n  title: string\n  status: CardStatus\n  owner: string | null\n  creator: string\n  date: Date\n}\n\ninterface ICardReducer {\n  deleteCard(state:Card[], id:string):void\n  addCard(state:Card[], card:Card):Card[]\n  addCards(state:Card[], cards:Card[]):Card[]\n  setStatus(state:Card[], id:string, status:CardStatus):Card[]\n  setTitle(state:Card[], id:string, title:string):Card[]\n  setOwner(state:Card[], id:string, owner:string):Card[]\n}\n\nexport interface ICardDispatcher {\n  deleteCard(id:string):void\n  addCard(card:Card):void\n  addCards(cards:Card[]):void\n  setStatus(id:string, status:CardStatus):void\n  setTitle(id:string, title:string):void\n  setOwner(id:string, owner:string):void\n}\n\nexport const reducer:ICardReducer = {\n  // Delete a card by id\n  deleteCard: (state:Card[], id:string) => state.filter(i => i.id !== id),\n\n  // Create a new card\n  addCard: (state:Card[], card:Card):Card[] => [card, ...state],\n\n  // Add multiple new cards\n  addCards: (state:Card[], cards:Card[]):Card[] => [...cards, ...state],\n\n  // Set the status of an item\n  setStatus: (state:Card[], id:string, status:CardStatus):Card[] =>\n    state.map(i =>\n      i.id === id\n        ? {\n            ...i,\n            status\n          }\n        : i\n    ),\n\n  // Set the label of an item\n  setTitle: (state:Card[], id:string, title:string):Card[] =>\n    state.map(i =>\n      i.id === id\n        ? {\n            ...i,\n            title\n          }\n        : i\n    ),\n\n    // Set the owner of an item\n    setOwner: (state:Card[], id:string, owner:string):Card[] =>\n      state.map(i =>\n        i.id === id\n          ? {\n              ...i,\n              owner\n            }\n          : i\n      )\n\n}\n\nexport default globalReducer(\n  // Load cards from local storage\n  // JSON.parse(localStorage.getItem(\"cards\") || \"[]\"),\n  [],\n  reducer\n  // On state change, persist to local storage\n  // cards => localStorage.setItem(\"cards\", JSON.stringify(cards))\n)\n","import globalReducer from \"./globalreducer\";\n\nexport type User = {\n  value: string\n  label: string\n  id: string\n}\n\ninterface IUserReducer {\n  addUser(state:User[],user:User):User[]\n  addUsers(state:User[], users:User[]):User[]\n  deleteUser(state:User[], id:string):User[]\n}\n\nexport const reducer:IUserReducer = {\n\n  // Create a new user\n  addUser: (state:User[], user:User):User[] => [user, ...state],\n\n  // Add a user Array\n  addUsers: (state:User[], users:User[]):User[] => [...users, ...state],\n\n  // Delete a user by id\n  deleteUser: (state:User[], id:string):User[] => state.filter(i => i.id !== id),\n\n};\n\nexport interface IUserDispatcher {\n  addUser(user:User[]):void\n  addUsers(users:User[]):void\n  deleteUser(id:string):void\n}\n\nexport default globalReducer(\n  // Load users from local storage\n  // JSON.parse(localStorage.getItem(\"users\") || \"[]\"),\n  [],\n  reducer,\n  // On state change, persist to local storage\n  // users => localStorage.setItem(\"users\", JSON.stringify(users))\n);\n","\nexport type CardStatusValue = 'backlog' | 'todo' | 'inprogress' | 'resolved' | 'won\\'t fix'\ntype CardStatusLabel = 'Backlog' | 'To Do' | 'In Progress' | 'Resolved' | 'Won\\'t Fix'\n\nexport type CardStatus = {\n  value: CardStatusValue\n  label: CardStatusLabel\n}\n\nexport interface IStatusService {\n  statusTypes: CardStatus[]\n  getStatusByValue(value:CardStatusValue):CardStatus\n}\n\nexport default class StatusService implements IStatusService {\n\n  private static instance: StatusService;\n  public statusTypes:CardStatus[]\n\n  private constructor() {\n    this.statusTypes = [\n        {value:'backlog', label:'Backlog'},\n        {value:'todo', label:'To Do'},\n        {value:'inprogress', label:'In Progress'},\n        {value:'resolved', label:'Resolved'},\n        {value:'won\\'t fix', label:'Won\\'t Fix'}\n    ]\n  }\n\n  public static getInstance(): StatusService {\n      if (!StatusService.instance)\n          StatusService.instance = new StatusService();\n\n      return StatusService.instance;\n  }\n\n  public getStatusByValue = (value:CardStatusValue):CardStatus =>\n    this.statusTypes.filter(i => i.value === value)[0]\n\n}\n","import statusService, { CardStatus, CardStatusValue } from '../services/statusService'\nimport { Card, ICardDispatcher } from '../reducers/useCards'\nimport { User } from '../reducers/useUsers'\n\nimport { gql } from '@apollo/client';\nimport { ApolloClient, NormalizedCacheObject } from '@apollo/client'\n\n\ntype ServerCard = {\n  id: string\n  title: string\n  status: CardStatusValue\n  owner: string | null\n  creator: string\n  date: Date\n}\n\nexport interface ICardService {\n  addCard(status:CardStatus):Promise<any>\n  getCards():void\n  updateStatus(id:string, status:CardStatus):Promise<void>\n  updateOwner(id:string, owner:User):Promise<void>\n  updateTitle(id:string, oldtitle:string, newtitle:string):Promise<void>\n  deleteCard(id:string):Promise<void>\n}\n\ntype TitleTimeout = {\n  id: string\n  oldTitle: string\n  timeout: any\n}\n\nexport class CardService implements ICardService {\n\n  private static instance:ICardService\n\n  private dispatcher:any\n  private titleTimeouts:TitleTimeout[]\n  private apolloClient:ApolloClient<NormalizedCacheObject>\n\n  private constructor (dispatcher:any, apolloClient:ApolloClient<NormalizedCacheObject>) {\n    this.dispatcher = dispatcher\n    this.apolloClient = apolloClient\n    this.titleTimeouts = []\n  }\n\n  public static getInstance(dispatcher?: ICardDispatcher, apolloClient?: ApolloClient<NormalizedCacheObject>): ICardService {\n    if (!CardService.instance && apolloClient) {\n        CardService.instance = new CardService(dispatcher, apolloClient)\n    }\n\n    return CardService.instance;\n  }\n\n  // converts the Card from the Server model to the client model\n  private convertServerCard = (card:ServerCard):Card => {\n    return {\n      id: card.id,\n      title: card.title,\n      status: statusService.getInstance().getStatusByValue(card.status),\n      owner: card.owner,\n      creator: card.creator,\n      date: card.date\n    }\n  }\n\n  // gets All Cards from Server\n  public getCards = ():Promise<any> =>\n    this.apolloClient.query({\n        query: gql`{\n            cards {\n              title\n              id\n              status\n              owner\n              creator\n              date\n            }\n          }`,\n      })\n      .then(res =>\n        this.dispatcher.addCards((res.data.cards as ServerCard[])\n        .map(card => this.convertServerCard(card))))\n      .catch(error => console.log(error))\n\n  // Adds a new Cards\n  public addCard = (status:CardStatus):Promise<void> => {\n    return this.apolloClient.mutate({\n        variables: {status: status.value},\n        mutation: gql`\n          mutation AddCard($status: String) {\n            addCard(status: $status) {\n              title\n              id\n              status\n              owner\n              creator\n              date\n            }\n          }`,\n      })\n      .then(res => {\n        return this.dispatcher.addCard(this.convertServerCard(res.data.addCard))\n      })\n      .catch(error => console.log(\"Error: \" + error))\n    }\n\n  private update = (id:string, param:any):Promise<void> => {\n    return this.apolloClient.mutate({\n      variables: {id, card: param},\n      mutation: gql`\n        mutation UpdateCard($id: ID, $card:CardInput) {\n          updateCard(id: $id, card:$card) {\n            title\n            id\n            status\n            owner\n            creator\n            date\n          }\n        }`,\n    })\n    .then(res => {\n      // return this.dispatcher.addCard(this.convertServerCard(res.data.updateCard))\n    })\n    .catch(error => console.log(\"Error: \" + error))\n  }\n\n\n  public updateStatus = (id: string, selectedDropdown:CardStatus):Promise<void> => {\n    this.dispatcher.setStatus(id, selectedDropdown)\n    return this.update(id, {status: selectedDropdown.value})\n  }\n\n  public updateOwner = (id: string, selectedDropdown:any):Promise<void> => {\n    var owner = selectedDropdown ? selectedDropdown.value : null\n    this.dispatcher.setOwner(id, owner)\n    return this.update(id, {owner})\n  }\n\n  public updateTitle = (id: string, oldTitle:string, title:string):any => {\n\n    let timeout = this.titleTimeouts.filter(timeouts => timeouts.id === id)[0]\n    let newTimeout = () => setTimeout(() => {\n      this.titleTimeouts = this.titleTimeouts.filter(timeouts => !(timeouts.id === id))\n      return this.update(id, {title})\n    }, 2000)\n\n    if (timeout) {\n      clearTimeout(timeout.timeout)\n      timeout.timeout = newTimeout()\n    } else {\n      let newTitleTimeout = {\n        id, oldTitle,\n        timeout: newTimeout()\n      }\n      this.titleTimeouts = [newTitleTimeout, ...this.titleTimeouts]\n    }\n\n    this.dispatcher.setTitle(id, title)\n  }\n\n  public deleteCard = (id:string):Promise<void> =>\n    this.apolloClient.mutate({\n      variables: {id},\n      mutation: gql`\n        mutation DeleteCard($id: ID) {\n          deleteCard(id: $id)\n        }`,\n    })\n    .then(() => this.dispatcher.deleteCard(id))\n    .catch(error => console.log(error))\n\n}\n","\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nexport const apolloClient = new ApolloClient({\n  cache: new InMemoryCache({\n    addTypename: false\n  }),\n  uri: '/graphql',\n});\n","import { User } from '../reducers/useUsers'\n\nimport { gql } from '@apollo/client';\n\nimport { apolloClient } from '../services/apolloClient'\n\ntype ServerUser = {\n  id: string\n  name: string\n}\n\ninterface IUserServiceConst {\n  getUsers(addUsers:Function):Promise<any>\n  addUser(addUser:Function, name:string):Promise<string>\n  deleteUser(deleteUser:Function, id:string):Promise<void>|null\n}\n\n// converts users into format for the dropdown\nconst expandUsers = (u:ServerUser[]):User[] =>\n  u.map(i => ({value:i.name, label:i.name, id: i.id}))\n\nexport const userService:IUserServiceConst  = {\n\n  // gets All Users from Server\n  getUsers : (addUsers:Function):Promise<void> =>\n    apolloClient.query({\n      query: gql`{\n          users {\n            name\n            id\n          }\n        }`,\n    })\n    .then(res => addUsers(expandUsers(res.data.users)))\n    .catch(err => console.log(err)),\n\n  // Adds a new Users\n  addUser : (addUser:Function, name:string):Promise<any> =>\n    apolloClient.mutate({\n      variables: {name},\n      mutation: gql`\n        mutation AddUser($name: String) {\n          addUser(name: $name) {\n            id\n            name\n          }\n        }`,\n    })\n    .then(res => addUser(expandUsers([res.data.addUser])))\n    .catch(err => console.log(err)),\n\n  // Deletes a User\n  deleteUser : (deleteUser:Function, id:string):Promise<void>|null =>\n    id ? apolloClient.mutate({\n        variables: {id},\n        mutation: gql`\n          mutation DeleteUser($id: ID) {\n            deleteUser(id: $id)\n          }`,\n      })\n      .then(res => deleteUser(id))\n      .catch(err => console.log(err)) : null\n\n}\n","import React, { FC, useState } from 'react';\n\nimport { userService } from '../services/userService'\nimport useUsers, { User, IUserDispatcher } from '../reducers/useUsers'\n\nimport './scss/header.scss'\n\nimport Select from 'react-select'\n\nlet Header: FC = () => {\n\n  const [users, { addUser, deleteUser }]:[User[], IUserDispatcher] = (useUsers as any)()\n\n  const [userInput, setUserInput] = useState<string>()\n  const [userDropdown, setUserDropdown] = useState<User>()\n\n  let _onClickAddUser = () => {\n    if (userInput)\n      userService.addUser(addUser, userInput)\n    setUserInput('')\n  }\n\n  let _onChangeInput = (e:React.ChangeEvent<HTMLInputElement>) => setUserInput(e.currentTarget.value)\n  let _onChangeUser = (selectedDropdown:any) => setUserDropdown(selectedDropdown)\n  let _onClickDeleteUser = () => userService.deleteUser(deleteUser,userDropdown ? userDropdown.id : '')\n\n  return (\n    <header className=\"boardHeader\">\n      <input\n        placeholder=\"New Username\"\n        value={userInput}\n        onChange={_onChangeInput}/>\n      <button onClick={_onClickAddUser}>Add User</button>\n      <Select\n        className=\"deleteUser\"\n        options={users}\n        value={userDropdown}\n        placeholder=\"Pick User\"\n        isClearable={true}\n        onChange={_onChangeUser}\n      />\n      <button onClick={_onClickDeleteUser}>Delete User</button>\n    </header>\n  )\n}\n\nexport default Header;\n","export function guid():string {\n  var s4 = () => {\n    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n  };\n\n  return `${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n}\n\nconst capitalize = (s:string|null):string => {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\nexport default capitalize\n","import React, { FC, useEffect } from 'react';\nimport './scss/board.scss';\n\nimport useCards, { Card, ICardDispatcher } from '../reducers/useCards'\nimport useUsers, { User, IUserDispatcher } from '../reducers/useUsers'\n\nimport { CardService, ICardService } from '../services/cardService'\nimport { userService } from '../services/userService'\nimport StatusService, { CardStatus } from '../services/statusService'\nimport { apolloClient } from '../services/apolloClient'\n\nimport Header from './header'\nimport Column from './column'\n\nvar cardService:ICardService\n\nlet Board: FC = () => {\n\n  const [cards, cardDispatcher]:[cards:Card[], dispatcher:ICardDispatcher] = (useCards as any)()\n  const [users, { addUsers }]:[User[], IUserDispatcher] = (useUsers as any)()\n\n  useEffect(() => {\n    cardService = CardService.getInstance(cardDispatcher, apolloClient)\n    cardService.getCards()\n    userService.getUsers(addUsers)\n  },[])\n\n  let Columns = StatusService.getInstance().statusTypes.map(((status:CardStatus) =>\n    <Column\n      key={status.label}\n      status={status}\n      users={users}\n      cards={cards}\n      cardService={cardService}\n    ></Column>\n  ))\n\n  return (\n    <div className=\"board\">\n      <Header/>\n      <main className=\"boardmain\">\n        {Columns}\n      </main>\n    </div>\n  );\n}\n\nexport default Board;\n","import React, { FC, useState } from 'react'\n\nimport './scss/card.scss'\n\nimport Select from 'react-select'\nimport TextareaAutosize from 'react-textarea-autosize'\nimport statusService from '../services/statusService'\nimport { ICardService } from '../services/cardService'\nimport { Card } from '../reducers/useCards'\nimport capitalize from \"../utils/utils\"\n\nlet CardComp: FC<{\n  model:Card\n  cardService:ICardService\n  users:Object[]\n}> = (props) => {\n\n  let [editTitle, setEditTitle] = useState<boolean>(false)\n  let [deletePending, setDeletePending] = useState<boolean>(false)\n  let _toggleTitle = () => setEditTitle(!editTitle)\n\n  let cardService = props.cardService\n  let _onChangeStatus = (selectedDropdown:any) =>\n    cardService.updateStatus(props.model.id, selectedDropdown)\n  let _onChangeOwner = (selectedDropdown:any) =>\n    cardService.updateOwner(props.model.id, selectedDropdown)\n  let _onChangeInput = (e:React.ChangeEvent<HTMLTextAreaElement>) =>\n    cardService.updateTitle(props.model.id, props.model.title, e.currentTarget.value)\n  let _onDeleteButton = () => {\n    setDeletePending(true)\n    cardService.deleteCard(props.model.id)\n      .catch(error => console.log(error))\n      .finally(() => setDeletePending(false))\n  }\n\n  return (\n    <div className={`card ${deletePending ? \"deletePending\" : \"\"}`}>\n\n      <header>\n        <Select\n          className=\"selectOwner\"\n          options={props.users}\n          value={{\n            value: props.model.owner,\n            label: capitalize(props.model.owner)\n          }}\n          placeholder=\"Owner\"\n          isClearable={true}\n          onChange={_onChangeOwner}\n        />\n        <Select\n          className=\"selectStatus\"\n          options={statusService.getInstance().statusTypes}\n          value={props.model.status}\n          placeholder=\"Status\"\n          onChange={_onChangeStatus}\n        />\n      </header>\n\n      <main>\n\n        { !editTitle &&\n          <div onClick={_toggleTitle}\n          >{props.model.title}</div>\n        }\n\n        { editTitle  &&\n          <TextareaAutosize\n            placeholder=\"Enter Title\"\n            autoFocus\n            value={props.model.title}\n            onChange={_onChangeInput}\n            onBlur={_toggleTitle}\n        />}\n\n      </main>\n\n      <button\n        className=\"deleteButton\"\n        onClick={_onDeleteButton}\n      >X</button>\n\n    </div>\n  )\n}\n\n\nexport default CardComp\n","import React, { FC } from 'react'\nimport './scss/column.scss'\n\nimport CardComp from './card'\nimport { CardStatus } from '../services/statusService'\nimport { Card } from '../reducers/useCards'\nimport { User } from '../reducers/useUsers'\nimport { ICardService } from '../services/cardService'\n\nlet Column: FC<{\n  status:CardStatus\n  users:User[]\n  cards:Card[]\n  cardService:ICardService\n}> = (props) => {\n\n  let _onClick = () =>\n    props.cardService.addCard(props.status)\n\n  return (\n    <div className=\"column\">\n      <header className=\"columnHeader\">\n        {props.status.label}\n        <button onClick={_onClick}>+</button>\n      </header>\n      <main className=\"columnMain\">\n        {props.cards.filter(\n          card => card.status.value === props.status.value).map((\n            cardModel =>\n              <CardComp\n                key={cardModel.id}\n                model={cardModel}\n                cardService={props.cardService}\n                users={props.users}\n              ></CardComp>\n        ))}\n      </main>\n    </div>\n  )\n}\n\nexport default Column\n","import React from 'react';\nimport './App.scss';\n\nimport Board from './components/board'\n\nfunction App() {\n\n  return (\n    <React.StrictMode>\n      <div className=\"App\">\n        <Board></Board>\n      </div>\n    </React.StrictMode>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}