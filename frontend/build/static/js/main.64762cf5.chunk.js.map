{"version":3,"sources":["utils/createevent.tsx","reducers/globalreducer.tsx","reducers/useCards.tsx","reducers/useUsers.tsx","services/statusService.tsx","services/cardService.tsx","services/userService.tsx","components/header.tsx","utils/utils.tsx","components/board.tsx","components/card.tsx","components/column.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["createEvent","invokeList","event","e","add","remove","filter","c","globalReducer","initialValue","reducer","onStateChange","undefined","state","onChange","dispatch","Object","keys","reduce","p","params","newState","selector","onComponentStateChanged","useState","componentState","setComponentState","useEffect","onComponentChange","newComponentState","deleteCard","id","i","addCard","card","addCards","cards","setStatus","status","map","setTitle","title","setOwner","owner","addUser","user","addUsers","users","deleteUser","StatusService","statusTypes","getStatusByValue","value","this","label","CardService","dispatcher","statusService","titleTimeouts","convertServerCard","_id","creator","date","getCards","console","log","axios","get","then","res","data","catch","error","post","update","param","updateStatus","selectedDropdown","updateOwner","updateTitle","oldTitle","newTitle","timeout","timeouts","newTimeout","setTimeout","clearTimeout","newTitleTimeout","delete","UserService","expandUsers","u","name","getUsers","Header","props","userService","userInput","setUserInput","userDropdown","setUserDropdown","className","placeholder","currentTarget","onClick","options","isClearable","cardService","capitalize","s","charAt","toUpperCase","slice","Card","editTitle","setEditTitle","deletePending","setDeletePending","_toggleTitle","model","autoFocus","onBlur","finally","Column","cardModel","Board","useCards","cardDispatcher","useUsers","userDispatcher","Columns","App","StrictMode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64762cf5.chunk.js","sourcesContent":["/**\n * Creates a new event that allows subscribers to add and remove event handlers.\n * @return {function}\n * @property {function(handler: function)} add Add a new event handler.\n * @property {function(handler: function)} remove Remove an event handler.\n */\nexport default function createEvent() {\n  let invokeList:any[] = [];\n\n  const event = (...args:any[]) => {\n    for (const e of invokeList) {\n      e(...args);\n    }\n  };\n\n  event.add = (e:any) => {\n    invokeList = [...invokeList, e];\n  };\n\n  event.remove = (e:any) => {\n    invokeList = invokeList.filter(c => c !== e);\n  };\n\n  return event;\n}\n","import { useEffect, useState } from \"react\";\n\nimport createEvent from \"../utils/createevent\";\n\n/**\n * Creates a global reducer for use within any number of components. The function returned allows for a selector function to be passed to limit the re-renders of the consuming component.\n *\n * @param {Object} initialValue The initial value for the state.\n * @param {Object} reducer The dispatch functions.\n * @param {function(state: Object)} [onStateChange=undefined] onStateChange An optional callback for when the state changes. Can be used for persisting to local storage.\n * @return {function(selector: function = undefined, onComponentStateChanged: function = undefined): [Object, Object]}\n */\nexport default function globalReducer(\n  initialValue:any[],\n  reducer:any,\n  onStateChange:any = undefined\n) {\n  let state = initialValue;\n  const onChange = createEvent();\n\n  const dispatch = Object.keys(reducer).reduce(\n    (p, c) => ({\n      ...p,\n      [c]: (...params:any[]) => {\n        const newState = reducer[c](state, ...params);\n\n        if (state !== newState) {\n          state = newState;\n          onChange(newState);\n\n          if (onStateChange)\n            onStateChange(newState);\n\n        }\n      }\n    }),\n    {}\n  );\n\n  return (selector:any = undefined, onComponentStateChanged:any = undefined) => {\n    const [componentState, setComponentState] = useState(\n      selector ? selector(state) : state\n    );\n    useEffect(\n      () => {\n        const onComponentChange = (newState:any[]) => {\n          const newComponentState = selector ? selector(newState) : newState;\n\n          if (newComponentState !== componentState) {\n            setComponentState(newComponentState);\n\n            if (onComponentStateChanged) {\n              onComponentStateChanged(newComponentState);\n            }\n          }\n        };\n\n        onChange.add(onComponentChange);\n\n        return () => {\n          onChange.remove(onComponentChange);\n        };\n      },\n      [componentState]\n    );\n    return [componentState, dispatch];\n  };\n}\n","import globalReducer from \"./globalreducer\"\n\nexport const reducer:ICardReducer = {\n  // Delete a card by id\n  deleteCard: (state:Card[], id:string) => state.filter(i => i.id !== id),\n\n  // Create a new card\n  addCard: (state:Card[], card:Card):Card[] => [card, ...state],\n\n  // Add multiple new cards\n  addCards: (state:Card[], cards:Card[]):Card[] => [...cards, ...state],\n\n  // Set the status of an item\n  setStatus: (state:Card[], id:string, status:CardStatus):Card[] =>\n    state.map(i =>\n      i.id === id\n        ? {\n            ...i,\n            status\n          }\n        : i\n    ),\n\n  // Set the label of an item\n  setTitle: (state:Card[], id:string, title:string):Card[] =>\n    state.map(i =>\n      i.id === id\n        ? {\n            ...i,\n            title\n          }\n        : i\n    ),\n\n    // Set the owner of an item\n    setOwner: (state:Card[], id:string, owner:string):Card[] =>\n      state.map(i =>\n        i.id === id\n          ? {\n              ...i,\n              owner\n            }\n          : i\n      )\n\n}\n\nexport default globalReducer(\n  // Load cards from local storage\n  // JSON.parse(localStorage.getItem(\"cards\") || \"[]\"),\n  [],\n  reducer\n  // On state change, persist to local storage\n  // cards => localStorage.setItem(\"cards\", JSON.stringify(cards))\n)\n","import globalReducer from \"./globalreducer\";\n\nexport const reducer:IUserReducer = {\n\n  // Create a new user\n  addUser: (state:User[], user:User):User[] => [user, ...state],\n\n  // Add a user Array\n  addUsers: (state:User[], users:User[]):User[] => [...users, ...state],\n\n  // Delete a user by id\n  deleteUser: (state:User[], id:string):User[] => state.filter(i => i.id !== id),\n\n};\n\nexport default globalReducer(\n  // Load users from local storage\n  // JSON.parse(localStorage.getItem(\"users\") || \"[]\"),\n  [],\n  reducer,\n  // On state change, persist to local storage\n  // users => localStorage.setItem(\"users\", JSON.stringify(users))\n);\n","\nexport default class StatusService implements IStatusService {\n\n  public statusTypes:CardStatus[]\n\n  constructor() {\n    this.statusTypes = [\n        {value:'backlog', label:'Backlog'},\n        {value:'todo', label:'To Do'},\n        {value:'inprogress', label:'In Progress'},\n        {value:'resolved', label:'Resolved'},\n        {value:'won\\'t fix', label:'Won\\'t Fix'}\n    ]\n  }\n\n  public getStatusByValue = (value:CardStatusValue):CardStatus =>\n    this.statusTypes.filter(i => i.value === value)[0]\n\n}\n","import axios from 'axios'\nimport statusService from '../services/statusService'\n\nexport default class CardService implements ICardService {\n\n  public statusService:IStatusService\n\n  private dispatcher:any\n  private titleTimeouts:TitleTimeout[]\n\n  constructor (dispatcher:any) {\n    this.statusService = new statusService()\n    this.dispatcher = dispatcher\n    this.titleTimeouts = []\n  }\n\n  // converts the Card from the Server model to the client model\n  private convertServerCard = (card:ServerCard):Card => ({\n      id: card._id,\n      title: card.title,\n      status: this.statusService.getStatusByValue(card.status),\n      owner: card.owner,\n      creator: card.creator,\n      date: card.date\n    })\n\n  // gets All Cards from Server\n  public getCards = ():void => {\n    console.log('GetCards');\n    axios.get('/cards')\n      .then(res =>\n        this.dispatcher.addCards((res.data as ServerCard[])\n        .map(card => this.convertServerCard(card))))\n      .catch(error => console.log(error))}\n\n  // Adds a new Cards\n  public addCard = (status:CardStatus):Promise<void> =>\n    axios.post('/cards/add', {status: status.value})\n      .then(res => this.dispatcher.addCard(this.convertServerCard(res.data)))\n      .catch(error => console.log(error))\n\n  private update = (id:string, param:any):Promise<void> =>\n    axios.post('/cards/update/'+id, param)\n      .then(res => console.log(res))\n      .catch(error => console.log(error))\n\n  public updateStatus = (id: string, selectedDropdown:CardStatus):Promise<void> => {\n    this.dispatcher.setStatus(id, selectedDropdown)\n    return this.update(id, {status: selectedDropdown.value})\n  }\n\n  public updateOwner = (id: string, selectedDropdown:any):Promise<void> => {\n    var owner = selectedDropdown ? selectedDropdown.value : null\n    this.dispatcher.setOwner(id, owner)\n    return this.update(id, owner)\n  }\n\n  public updateTitle = (id: string, oldTitle:string, newTitle:string):any => {\n\n    let timeout = this.titleTimeouts.filter(timeouts => timeouts.id === id)[0]\n    let newTimeout = () => setTimeout(() => {\n      // remove this timeout\n      this.titleTimeouts = this.titleTimeouts.filter(timeouts => !(timeouts.id === id))\n      return this.update(id, newTitle)\n    }, 2000)\n\n    if (timeout) {\n      clearTimeout(timeout.timeout)\n      timeout.timeout = newTimeout()\n    }\n    else {\n      let newTitleTimeout = {\n        id, oldTitle,\n        timeout: newTimeout()\n      }\n      this.titleTimeouts = [newTitleTimeout, ...this.titleTimeouts]\n    }\n\n    this.dispatcher.setTitle(id, newTitle)\n  }\n\n  public deleteCard = (id:string):Promise<void> =>\n    axios.delete('/cards/'+id)\n      .then(() => this.dispatcher.deleteCard(id))\n      .catch(error => console.log(error))\n\n}\n","import axios from 'axios'\n\nexport default class UserService implements IUserService {\n\n  public dispatcher:any\n\n  constructor (dispatcher:any) {\n    this.dispatcher = dispatcher\n  }\n\n  // converts users into format for the dropdown\n  private expandUsers = (u:ServerUser[]):User[] =>\n    u.map(i => ({value:i.name, label:i.name, id: i._id}))\n\n  // gets All Users from Server\n  public getUsers = ():any =>\n    axios.get('/users')\n      .then(res => this.dispatcher.addUsers(this.expandUsers(res.data)))\n      .catch(error => console.log(error))\n\n  // Adds a new Users\n  public addUser = (name:string):Promise<any> =>\n    axios.post('/users/add', {name})\n      .then(res => this.dispatcher.addUser(this.expandUsers([res.data])))\n      .catch(function (error) {\n        console.log(error)})\n\n  // Deletes a User\n  public deleteUser = (id:string):Promise<void>|null =>\n    id ? axios.delete('/users/'+id)\n      .then(res => this.dispatcher.deleteUser(id))\n      .catch(function (error) {\n        console.log(error)})\n        : null\n\n}\n","import React, { FC, useState } from 'react';\n\nimport './header.scss'\n\nimport Select from 'react-select'\n\nlet Header: FC<{\n  userService:IUserService\n  users:User[]\n}> = (props) => {\n\n  let userService = props.userService\n\n  const [userInput, setUserInput] = useState<string>()\n  const [userDropdown, setUserDropdown] = useState<User>()\n\n  let _onClickAddUser = () => {\n    if (userInput)\n      userService.addUser(userInput)\n    setUserInput('')\n  }\n\n  let _onChangeInput = (e:React.ChangeEvent<HTMLInputElement>) => setUserInput(e.currentTarget.value)\n  let _onChangeUser = (selectedDropdown:any) => setUserDropdown(selectedDropdown)\n  let _onClickDeleteUser = () => userService.deleteUser(userDropdown ? userDropdown.id : '')\n\n  return (\n    <header className=\"boardHeader\">\n      <input\n        placeholder=\"New Username\"\n        value={userInput}\n        onChange={_onChangeInput}/>\n      <button onClick={_onClickAddUser}>Add User</button>\n      <Select\n        className=\"deleteUser\"\n        options={props.users}\n        value={userDropdown}\n        placeholder=\"Pick User\"\n        isClearable={true}\n        onChange={_onChangeUser}\n      />\n      <button onClick={_onClickDeleteUser}>Delete User</button>\n    </header>\n  )\n}\n\nexport default Header;\n","export function guid():string {\n  var s4 = () => {\n    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n  };\n\n  return `${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n}\n\nconst capitalize = (s:string|null):string => {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\nexport default capitalize\n","import React, { FC, useEffect } from 'react';\nimport './board.scss';\n\nimport useCards from '../reducers/useCards'\nimport useUsers from '../reducers/useUsers'\n\nimport CardService from '../services/cardService'\nimport UserService from '../services/userService'\n\nimport Header from './header'\nimport Column from './column'\n\nvar cardService:CardService\nvar userService:UserService\n\nlet Board: FC = () => {\n\n  const [cards, cardDispatcher]:[cards:Card[], dispatcher:ICardDispatcher] = (useCards as any)()\n  const [users, userDispatcher]:[User[], IUserDispatcher] = (useUsers as any)()\n\n  useEffect(() => {\n    cardService = new CardService(cardDispatcher)\n    userService = new UserService(userDispatcher)\n    cardService.getCards()\n    userService.getUsers()\n  },[])\n\n  let Columns = cardService ? cardService.statusService.statusTypes.map((status =>\n    <Column\n      key={status.label}\n      status={status}\n      users={users}\n      cards={cards}\n      cardService={cardService}\n    ></Column>\n  )) : 'Loading'\n\n  return (\n    <div className=\"board\">\n      {userService &&\n        <Header\n          users={users}\n          userService={userService}\n      />}\n      <main className=\"boardmain\">\n        {Columns}\n      </main>\n    </div>\n  );\n}\n\nexport default Board;\n","import React, { FC, useState } from 'react'\n\nimport './card.scss'\n\nimport Select from 'react-select'\nimport TextareaAutosize from 'react-textarea-autosize'\nimport capitalize from \"../utils/utils\"\n\nlet Card: FC<{\n  model:Card\n  cardService:ICardService\n  users:Object[]\n}> = (props) => {\n\n  let [editTitle, setEditTitle] = useState<boolean>(false)\n  let [deletePending, setDeletePending] = useState<boolean>(false)\n  let _toggleTitle = () => setEditTitle(!editTitle)\n\n  let cardService = props.cardService\n  let _onChangeStatus = (selectedDropdown:any) =>\n    cardService.updateStatus(props.model.id, selectedDropdown)\n  let _onChangeOwner = (selectedDropdown:any) =>\n    cardService.updateOwner(props.model.id, selectedDropdown)\n  let _onChangeInput = (e:React.ChangeEvent<HTMLTextAreaElement>) =>\n    cardService.updateTitle(props.model.id, props.model.title, e.currentTarget.value)\n  let _onDeleteButton = () => {\n    setDeletePending(true)\n    cardService.deleteCard(props.model.id)\n      .catch(error => console.log(error))\n      .finally(() => setDeletePending(false))\n  }\n\n  return (\n    <div className={`card ${deletePending ? \"deletePending\" : \"\"}`}>\n\n      <header>\n        <Select\n          className=\"selectOwner\"\n          options={props.users}\n          value={{\n            value: props.model.owner,\n            label: capitalize(props.model.owner)\n          }}\n          placeholder=\"Owner\"\n          isClearable={true}\n          onChange={_onChangeOwner}\n        />\n        <Select\n          className=\"selectStatus\"\n          options={cardService.statusService.statusTypes}\n          value={props.model.status}\n          placeholder=\"Status\"\n          onChange={_onChangeStatus}\n        />\n      </header>\n\n      <main>\n\n        { !editTitle &&\n          <div onClick={_toggleTitle}\n          >{props.model.title}</div>\n        }\n\n        { editTitle  &&\n          <TextareaAutosize\n            placeholder=\"Enter Title\"\n            autoFocus\n            value={props.model.title}\n            onChange={_onChangeInput}\n            onBlur={_toggleTitle}\n        />}\n\n      </main>\n\n      <button\n        className=\"deleteButton\"\n        onClick={_onDeleteButton}\n      >X</button>\n\n    </div>\n  )\n}\n\n\nexport default Card\n","import React, { FC } from 'react'\nimport './column.scss'\n\nimport Card from './card'\n\nlet Column: FC<{\n  status:CardStatus\n  users:User[]\n  cards:Card[]\n  cardService:ICardService\n}> = (props) => {\n\n  let _onClick = () =>\n    props.cardService.addCard(props.status)\n\n  return (\n    <div className=\"column\">\n      <header className=\"columnHeader\">\n        {props.status.label}\n        <button onClick={_onClick}>+</button>\n      </header>\n      <main className=\"columnMain\">\n        {props.cards.filter(\n          card => card.status.value === props.status.value).map((\n            cardModel =>\n              <Card\n                key={cardModel.id}\n                model={cardModel}\n                cardService={props.cardService}\n                users={props.users}\n              ></Card>\n        ))}\n      </main>\n    </div>\n  )\n}\n\nexport default Column\n","import React from 'react';\nimport './App.scss';\n\nimport Board from './components/board'\n\nfunction App() {\n\n  return (\n    <React.StrictMode>\n      <div className=\"App\">\n        <Board></Board>\n      </div>\n    </React.StrictMode>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}