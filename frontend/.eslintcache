[{"/Users/victor/Development/test/board/frontend/src/index.tsx":"1","/Users/victor/Development/test/board/frontend/src/reportWebVitals.ts":"2","/Users/victor/Development/test/board/frontend/src/App.tsx":"3","/Users/victor/Development/test/board/frontend/src/components/board.tsx":"4","/Users/victor/Development/test/board/frontend/src/components/header.tsx":"5","/Users/victor/Development/test/board/frontend/src/components/column.tsx":"6","/Users/victor/Development/test/board/frontend/src/components/card.tsx":"7","/Users/victor/Development/test/board/frontend/src/reducers/useUsers.ts":"8","/Users/victor/Development/test/board/frontend/src/reducers/useCards.ts":"9","/Users/victor/Development/test/board/frontend/src/reducers/globalreducer.ts":"10","/Users/victor/Development/test/board/frontend/src/services/statusService.ts":"11","/Users/victor/Development/test/board/frontend/src/utils/utils.ts":"12","/Users/victor/Development/test/board/frontend/src/utils/createevent.ts":"13","/Users/victor/Development/test/board/frontend/src/services/apolloClient.ts":"14","/Users/victor/Development/test/board/frontend/src/services/cardService.ts":"15","/Users/victor/Development/test/board/frontend/src/services/userService.ts":"16"},{"size":500,"mtime":1609155135981,"results":"17","hashOfConfig":"18"},{"size":426,"mtime":1605198138944,"results":"19","hashOfConfig":"18"},{"size":258,"mtime":1609155149516,"results":"20","hashOfConfig":"18"},{"size":1454,"mtime":1611849290863,"results":"21","hashOfConfig":"18"},{"size":1430,"mtime":1609755559074,"results":"22","hashOfConfig":"18"},{"size":1102,"mtime":1609772286890,"results":"23","hashOfConfig":"18"},{"size":2581,"mtime":1609772570414,"results":"24","hashOfConfig":"18"},{"size":991,"mtime":1608048803747,"results":"25","hashOfConfig":"18"},{"size":2057,"mtime":1608048128796,"results":"26","hashOfConfig":"18"},{"size":2042,"mtime":1607892056091,"results":"27","hashOfConfig":"18"},{"size":1116,"mtime":1608047654792,"results":"28","hashOfConfig":"18"},{"size":371,"mtime":1607883480233,"results":"29","hashOfConfig":"18"},{"size":603,"mtime":1607883178859,"results":"30","hashOfConfig":"18"},{"size":192,"mtime":1609707416347,"results":"31","hashOfConfig":"18"},{"size":4965,"mtime":1611849286409,"results":"32","hashOfConfig":"18"},{"size":2142,"mtime":1609771546382,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"x1no8a",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/victor/Development/test/board/frontend/src/index.tsx",[],["71","72"],"/Users/victor/Development/test/board/frontend/src/reportWebVitals.ts",[],"/Users/victor/Development/test/board/frontend/src/App.tsx",[],"/Users/victor/Development/test/board/frontend/src/components/board.tsx",["73"],"import React, { FC, useEffect } from 'react';\nimport './scss/board.scss';\n\nimport useCards, { Card, ICardDispatcher } from '../reducers/useCards'\nimport useUsers, { User, IUserDispatcher } from '../reducers/useUsers'\n\nimport { CardService, ICardService } from '../services/cardService'\nimport { UserService, IUserService } from '../services/userService'\nimport StatusService, { CardStatus } from '../services/statusService'\nimport { apolloClient } from '../services/apolloClient'\n\nimport Header from './header'\nimport Column from './column'\n\nvar cardService:ICardService\nvar userService:IUserService\n\nlet Board: FC = () => {\n\n  const [cards, { addCards }]:[Card[], ICardDispatcher] = (useCards as any)()\n  const [users, { addUsers }]:[User[], IUserDispatcher] = (useUsers as any)()\n\n  useEffect(() => {\n    cardService = CardService.getInstance(apolloClient)\n    // cardService.getCards(addCards)\n    console.log(cardService.getCards(addCards)\n      .then((test:any) => console.log('loaded ' + test))\n    )\n    userService = UserService.getInstance(apolloClient)\n    userService.getUsers(addUsers)\n  },[])\n\n  let Columns = StatusService.getInstance().statusTypes.map(((status:CardStatus) =>\n    <Column\n      key={status.label}\n      status={status}\n      users={users}\n    ></Column>\n  ))\n\n  return (\n    <div className=\"board\">\n      <Header/>\n      <main className=\"boardmain\">\n        {Columns}\n      </main>\n    </div>\n  );\n}\n\nexport default Board;\n","/Users/victor/Development/test/board/frontend/src/components/header.tsx",[],"/Users/victor/Development/test/board/frontend/src/components/column.tsx",["74"],"import React, { FC } from 'react'\nimport './scss/column.scss'\n\nimport CardComp from './card'\nimport { CardStatus } from '../services/statusService'\nimport useCards, { Card, ICardDispatcher} from '../reducers/useCards'\nimport { User } from '../reducers/useUsers'\nimport { CardService, ICardService } from '../services/cardService'\n\nlet Column: FC<{\n  status:CardStatus\n  users:User[]\n}> = (props) => {\n\nconst [cards, { addCard }]:[Card[], ICardDispatcher] = (useCards as any)()\n\n  let _onClick = () => CardService.getInstance().addCard(addCard, props.status)\n\n  return (\n    <div className=\"column\">\n      <header className=\"columnHeader\">\n        {props.status.label}\n        <button onClick={_onClick}>+</button>\n      </header>\n      <main className=\"columnMain\">\n        {cards.filter(\n          card => card.status.value === props.status.value).map((\n            cardModel =>\n              <CardComp\n                key={cardModel.id}\n                model={cardModel}\n                users={props.users}\n              ></CardComp>\n        ))}\n      </main>\n    </div>\n  )\n}\n\nexport default Column\n","/Users/victor/Development/test/board/frontend/src/components/card.tsx",["75","76"],"import React, { FC, useState } from 'react'\n\nimport './scss/card.scss'\n\nimport Select from 'react-select'\nimport TextareaAutosize from 'react-textarea-autosize'\nimport statusService from '../services/statusService'\nimport { CardService, ICardService } from '../services/cardService'\nimport useCards, { Card, ICardDispatcher } from '../reducers/useCards'\nimport capitalize from \"../utils/utils\"\n\nlet CardComp: FC<{\n  model:Card\n  users:Object[]\n}> = (props) => {\n\n  const [cards, { setStatus, setOwner, setTitle, deleteCard }]:[Card[], ICardDispatcher] = (useCards as any)()\n\n  let [editTitle, setEditTitle] = useState<boolean>(false)\n  let [deletePending, setDeletePending] = useState<boolean>(false)\n  let _toggleTitle = () => setEditTitle(!editTitle)\n\n  let cardService = CardService.getInstance()\n  let _onChangeStatus = (selectedDropdown:any) =>\n    cardService.updateStatus(setStatus, props.model.id, selectedDropdown)\n  let _onChangeOwner = (selectedDropdown:any) =>\n    cardService.updateOwner(setOwner, props.model.id, selectedDropdown)\n  let _onChangeInput = (e:React.ChangeEvent<HTMLTextAreaElement>) =>\n    cardService.updateTitle(setTitle, props.model.id, props.model.title, e.currentTarget.value)\n  let _onDeleteButton = () => {\n    setDeletePending(true)\n    cardService.deleteCard(deleteCard, props.model.id)\n      .catch(error => console.log(error))\n      .finally(() => setDeletePending(false))\n  }\n\n  return (\n    <div className={`card ${deletePending ? \"deletePending\" : \"\"}`}>\n\n      <header>\n        <Select\n          className=\"selectOwner\"\n          options={props.users}\n          value={{\n            value: props.model.owner,\n            label: capitalize(props.model.owner)\n          }}\n          placeholder=\"Owner\"\n          isClearable={true}\n          onChange={_onChangeOwner}\n        />\n        <Select\n          className=\"selectStatus\"\n          options={statusService.getInstance().statusTypes}\n          value={props.model.status}\n          placeholder=\"Status\"\n          onChange={_onChangeStatus}\n        />\n      </header>\n\n      <main>\n\n        { !editTitle &&\n          <div onClick={_toggleTitle}\n          >{props.model.title}</div>\n        }\n\n        { editTitle  &&\n          <TextareaAutosize\n            placeholder=\"Enter Title\"\n            autoFocus\n            value={props.model.title}\n            onChange={_onChangeInput}\n            onBlur={_toggleTitle}\n        />}\n\n      </main>\n\n      <button\n        className=\"deleteButton\"\n        onClick={_onDeleteButton}\n      >X</button>\n\n    </div>\n  )\n}\n\n\nexport default CardComp\n","/Users/victor/Development/test/board/frontend/src/reducers/useUsers.ts",[],"/Users/victor/Development/test/board/frontend/src/reducers/useCards.ts",[],"/Users/victor/Development/test/board/frontend/src/reducers/globalreducer.ts",[],"/Users/victor/Development/test/board/frontend/src/services/statusService.ts",[],"/Users/victor/Development/test/board/frontend/src/utils/utils.ts",[],"/Users/victor/Development/test/board/frontend/src/utils/createevent.ts",[],"/Users/victor/Development/test/board/frontend/src/services/apolloClient.ts",[],"/Users/victor/Development/test/board/frontend/src/services/cardService.ts",["77"],"import statusService, { CardStatus, CardStatusValue } from '../services/statusService'\nimport { Card, ICardDispatcher } from '../reducers/useCards'\nimport { User } from '../reducers/useUsers'\n\nimport { gql } from '@apollo/client';\nimport { ApolloClient, NormalizedCacheObject } from '@apollo/client'\n\ntype ServerCard = {\n  id: string\n  title: string\n  status: CardStatusValue\n  owner: string | null\n  creator: string\n  date: Date\n}\n\nexport interface ICardService {\n  addCard(addCard:Function, status:CardStatus):Promise<any>\n  getCards(addCard:Function):Promise<any>\n  updateStatus(setTatus:Function, id:string, status:CardStatus):Promise<void>\n  updateOwner(setOwner:Function, id:string, owner:User):Promise<void>\n  updateTitle(setTitle:Function, id:string, oldtitle:string, newtitle:string):Promise<void>\n  deleteCard(deleteCard:Function, id:string):Promise<void>\n}\n\ntype TitleTimeout = {\n  id: string\n  oldTitle: string\n  timeout: any\n}\n\nexport class CardService implements ICardService {\n\n  private static instance:ICardService\n\n  private titleTimeouts:TitleTimeout[]\n  private apolloClient:ApolloClient<NormalizedCacheObject>\n\n  private constructor (apolloClient:ApolloClient<NormalizedCacheObject>) {\n    this.apolloClient = apolloClient\n    this.titleTimeouts = []\n  }\n\n  public static getInstance = (apolloClient?: ApolloClient<NormalizedCacheObject>): ICardService => {\n    if (!CardService.instance && apolloClient) {\n        CardService.instance = new CardService(apolloClient)\n    }\n\n    return CardService.instance;\n  }\n\n  // converts the Card from the Server model to the client model\n  private convertServerCard = (card:ServerCard):Card => {\n    return {\n      id: card.id,\n      title: card.title,\n      status: statusService.getInstance().getStatusByValue(card.status),\n      owner: card.owner,\n      creator: card.creator,\n      date: card.date\n    }\n  }\n\n  // gets All Cards from Server\n  public getCards = (addCards:Function):Promise<any> =>\n    this.apolloClient.query({\n        query: gql`{\n            cards {\n              title\n              id\n              status\n              owner\n              creator\n              date\n            }\n          }`,\n      })\n      .then(res => {\n        addCards((res.data.cards as ServerCard[])\n          .map(card => this.convertServerCard(card)))\n        return true\n      })\n      .catch(error => {\n        console.log(error)\n        return false\n      })\n\n\n  // Adds a new Cards\n  public addCard = (addCard:Function, status:CardStatus):Promise<void> => {\n    return this.apolloClient.mutate({\n        variables: {status: status.value},\n        mutation: gql`\n          mutation AddCard($status: String) {\n            addCard(status: $status) {\n              title\n              id\n              status\n              owner\n              creator\n              date\n            }\n          }`,\n      })\n      .then(res => addCard(this.convertServerCard(res.data.addCard)))\n      .catch(error => console.log(\"Error: \" + error))\n    }\n\n  private update = (id:string, param:any):Promise<void> => {\n    return this.apolloClient.mutate({\n      variables: {id, card: param},\n      mutation: gql`\n        mutation UpdateCard($id: ID, $card:CardInput) {\n          updateCard(id: $id, card:$card) {\n            title\n            id\n            status\n            owner\n            creator\n            date\n          }\n        }`,\n    })\n    .then(res => {\n      // return this.dispatcher.addCard(this.convertServerCard(res.data.updateCard))\n    })\n    .catch(error => console.log(\"Error: \" + error))\n  }\n\n\n  public updateStatus = (setStatus:Function, id: string, selectedDropdown:CardStatus):Promise<void> => {\n    setStatus(id, selectedDropdown)\n    return this.update(id, {status: selectedDropdown.value})\n  }\n\n  public updateOwner = (setOwner:Function, id: string, selectedDropdown:any):Promise<void> => {\n    var owner = selectedDropdown ? selectedDropdown.value : null\n    setOwner(id, owner)\n    return this.update(id, {owner})\n  }\n\n  public updateTitle = (setTitle:Function, id:string, oldTitle:string, title:string):any => {\n\n    let timeout = this.titleTimeouts.filter(timeouts => timeouts.id === id)[0]\n    let newTimeout = () => setTimeout(() => {\n      this.titleTimeouts = this.titleTimeouts.filter(timeouts => !(timeouts.id === id))\n      return this.update(id, {title})\n    }, 2000)\n\n    if (timeout) {\n      clearTimeout(timeout.timeout)\n      timeout.timeout = newTimeout()\n    } else {\n      let newTitleTimeout = {\n        id, oldTitle,\n        timeout: newTimeout()\n      }\n      this.titleTimeouts = [newTitleTimeout, ...this.titleTimeouts]\n    }\n\n    setTitle(id, title)\n  }\n\n  public deleteCard = (deleteCard:Function ,id:string):Promise<void> =>\n    this.apolloClient.mutate({\n      variables: {id},\n      mutation: gql`\n        mutation DeleteCard($id: ID) {\n          deleteCard(id: $id)\n        }`,\n    })\n    .then(() => deleteCard(id))\n    .catch(error => console.log(error))\n\n}\n","/Users/victor/Development/test/board/frontend/src/services/userService.ts",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":20,"column":10,"nodeType":"84","messageId":"85","endLine":20,"endColumn":15},{"ruleId":"82","severity":1,"message":"86","line":8,"column":23,"nodeType":"84","messageId":"85","endLine":8,"endColumn":35},{"ruleId":"82","severity":1,"message":"86","line":8,"column":23,"nodeType":"84","messageId":"85","endLine":8,"endColumn":35},{"ruleId":"82","severity":1,"message":"83","line":17,"column":10,"nodeType":"84","messageId":"85","endLine":17,"endColumn":15},{"ruleId":"82","severity":1,"message":"87","line":2,"column":16,"nodeType":"84","messageId":"85","endLine":2,"endColumn":31},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"@typescript-eslint/no-unused-vars","'cards' is assigned a value but never used.","Identifier","unusedVar","'ICardService' is defined but never used.","'ICardDispatcher' is defined but never used.","no-global-assign","no-unsafe-negation"]